@page "/reactchat/{username?}"

@using Microsoft.AspNetCore.SignalR.Client
@using Application.Chat
@using System.Text.Json
@using System.Diagnostics

@inject HttpClient HttpClient
@inject IConfiguration Configuration

@inject NavigationManager _navigation
@inject TrieChat _trieChat
@inject SpamFilter _spamFilter

@implements IAsyncDisposable

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap" rel="stylesheet">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
<PageTitle>Chat</PageTitle>

<div style="font-family: 'Bebas Neue', sans-serif; font-size: 2em; margin:5px; border: 2px solid rgba(249, 249, 127, 0.559); border-radius: 10px; padding: 10px;" 
    class="mt-2">
    Concurrent Users: @_clientsCnt
</div>

<label style="font-family: 'Bebas Neue', sans-serif; font-size:25px; for="translateTo" class="p-3">TRANSLATE TO -></label>

<select id="translateTo" @bind="translateTo" style="margin-left: -15px;">
    <option value="ko" selected>한국어</option>  
    <option value="en">영어</option>
    <option value="ja">일본어</option>
    <option value="zh-CN">중국어 간체</option>
    <option value="zh-TW">중국어 번체</option>
    <option value="vi">베트남어</option>
    <option value="id">인도네시아어</option>
    <option value="th">태국어</option>
    <option value="de">독일어</option>
    <option value="ru">러시아어</option>
    <option value="es">스페인어</option>
    <option value="it">이탈리아어</option>
    <option value="fr">프랑스어</option>
</select>

<div style="height: 295px; overflow-x: hidden" class="p-3">
    <div style="max-height: 244px; display: flex; flex-direction: column-reverse; overflow-y: scroll;" class="row">
        <div id="messagesList" style="">
            @foreach (var mes in _messages) {
                <div class="d-flex justify-content-between">
                    <span>
                    @if (mes.userName.CompareTo("[시스템 메시지]") == 0) {
                        <span style="color: red; font-family: 'VT323', monospace; font-size:20px">@($"{mes.userName}:")</span>
                        <span style="color: red;">@($"{mes.message}")</span>                    
                    }
                    else if(mes.showTranslatedText) {
                        <span style="font-family: 'VT323', monospace; font-size:20px">@($"{mes.userName}:")</span>
                        <span>@($"{mes.translation}")</span>
                    }
                    else {
                        <span style="font-family: 'VT323', monospace; font-size:20px">@($"{mes.userName}:")</span>
                        <span>@($"{mes.message}")</span>
                    }
                    </span>
                    <span style="font-family: 'Bebas Neue', sans-serif;">
                        <span>@TimeZoneInfo.ConvertTimeFromUtc(mes.sentTime, _localTimeZone).ToString("(yyyy'.'MM'.'dd'' - HH':'mm':'ss'') ")</span>

                        @if (mes.showTranslatedText) {
                            <button type="button" style="height: 33px;" class="btn btn-outline-light btn-sm" @onclick="()=>ShowOriginalMessage(mes)">
                                <p style="font-size: 17px;">
                                    original
                                </p>
                            </button>
                        }
                        else {
                            <button type="button" style="margin-left:5px; height: 33px;" class="btn btn-outline-light btn-sm flex justify-content-center" @onclick="()=>ShowTranslatedMessage(mes)">
                                <p style="font-size: 17px;">
                                    translate
                                </p>
                            </button>
                        }
                        @if (mes.userName.StartsWith(userName)) {
                            <button type="button" style="margin: 5px; height: 33px;" class="btn btn-outline-light btn-sm flex justify-content-center" @onclick="()=>OnDeleteButtonClickAsync(mes)">
                                <p style="font-size: 17px;">
                                    delete
                                </p>
                            </button>
                        }
                    </span>
                </div>
            }
        </div>
    </div>

    <div class="fixed-bottom bg-light p-2">
        <div class="container">
            <form class="row">
                <div class="col-auto" style="color: black;">
                    <label for="messageInput" style="font-family:'VT323', monospace; font-size:30px">@userName:</label>
                </div>
                <div class="col">
                    <input id="messageInput" class="form-control" @bind="_messageInput" size="50" />
                </div>

                <div class="col-auto" style="font-family: 'Bebas Neue', sans-serif;">
                    <button  @onclick:preventDefault   @onclick="Send"
                        disabled="@(!_isConnected)" class="btn btn-dark" style="width: 60px; height:40px" ><p style="font-size: 20px;">Send</p></button>
                </div>
            </form>
        </div>
    </div>
</div>


@code {
    private HubConnection? _hubConnection;
    private List<ChatMessageWithTranslation> _messages = new();
    private string? _messageInput;
    private int _clientsCnt;
    private TimeZoneInfo _localTimeZone = TimeZoneInfo.Local;
    private Stopwatch watch = new Stopwatch();
    private const int Nsec = 5;

    [Parameter]
    public string? userName { get; set; }

    private bool _isConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    private string translateTo = "ko";

    // 메시지 삭제 버튼 입력 시 처리 함수
    public async Task OnDeleteButtonClickAsync(ChatMessage message) {
        if (_hubConnection is not null)
            await _hubConnection.SendAsync("DeleteMessage", JsonSerializer.Serialize(message));
    }

    // 채팅창에 키보드 입력 시 처리 함수
    public async Task HandleKeyDown(KeyboardEventArgs e) {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_messageInput))
            await Send();
    }

    // 메시지를 채팅서버에 전송 함수
    private async Task Send() {
        // 채팅서버와 연결되어 있고 입력된 메시지가 비어있지 않으면 전송
        if (_hubConnection is not null && !string.IsNullOrWhiteSpace(_messageInput)) {
            if (_spamFilter.IsSpam(_messageInput) ) {    // 도배 시 Nsec동안 채팅금지
                _messages.Add(new ChatMessageWithTranslation("도배하셨습니다. "+ Nsec +"초간 채팅을 금지합니다", DateTime.UtcNow, "[시스템 메시지]"));
                InvokeAsync(StateHasChanged);

                watch = new Stopwatch();
                watch.Start();
                return;
            } else if (0 < watch.Elapsed.TotalSeconds && watch.Elapsed.TotalSeconds < Nsec) {   // 채팅금지된 상태: 남은 시간 알려줌
                _messages.Add(new ChatMessageWithTranslation( Math.Round(Nsec-watch.Elapsed.TotalSeconds, 0) + "초간 채팅을 금지합니다", DateTime.UtcNow, "[시스템 메시지]"));
                InvokeAsync(StateHasChanged);
                return;
            } else {            // 채팅금지 종료
                watch.Stop();
            }
            // ----------------------------------------------------------------
            if (_trieChat.FilterChat(_messageInput)){
                _messages.Add(new ChatMessageWithTranslation("욕설을 금지합니다", DateTime.UtcNow, "[시스템 메시지]"));
                InvokeAsync(StateHasChanged);
                return;
            }

            await _hubConnection.SendAsync("SendMessage", userName, _messageInput); // 전송
            _messageInput = null; // 메시지 input value 비우기
        }
    }

    // 페이지 초기화 시 호출
    // 메시지들 로딩, SignalR 설정
    protected override async Task OnInitializedAsync() {
        HttpClient.BaseAddress = new Uri(Configuration["ServerUrl"]!);

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigation.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<string>("ReceiveMessage", (json) => {
            var chatMessage = JsonSerializer.Deserialize<ChatMessage>(json);
            _messages.Add(new ChatMessageWithTranslation(chatMessage));
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("DeleteMessage", (json) => {
            var mesToDelete = JsonSerializer.Deserialize<ChatMessage>(json);
            _messages.RemoveAt(_messages.FindIndex((mes) => mes.isEqual(mesToDelete)));
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("ReceivePrevMessages", (json) => {
            var prevMessages = JsonSerializer.Deserialize<List<ChatMessage>>(json);
            _messages = prevMessages.Select((mes) => new ChatMessageWithTranslation(mes)).ToList();
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<int>("UpdateConnectedClientsCount", (count) => {
            _clientsCnt = count;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("AddConnectedUserName", userName);
    }

    // 페이지 종료 시 호출 함수. 채팅서버 연결 끊음.
    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }

    public async Task ShowOriginalMessage(ChatMessageWithTranslation chatMessage) {
        chatMessage.showTranslatedText = false;
        InvokeAsync(StateHasChanged);
    }

    public async Task ShowTranslatedMessage(ChatMessageWithTranslation chatMessage) {
        chatMessage.showTranslatedText = await TranslateMessage(chatMessage);
        InvokeAsync(StateHasChanged);
    }

    public async Task<bool> TranslateMessage(ChatMessageWithTranslation chatMessage) {
        var response = await HttpClient.GetAsync($"api/Chat/translate?textToTransltate={chatMessage.message}&translateTo={translateTo}");
        if (response.IsSuccessStatusCode) {
            string translatedMsg = await response.Content.ReadAsStringAsync();
            if (translatedMsg.CompareTo(chatMessage.message) != 0) {
                chatMessage.translation = translatedMsg;
                return true;
            }
        }
        return false;
    }
}
