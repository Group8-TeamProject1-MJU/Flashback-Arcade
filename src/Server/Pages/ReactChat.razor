@page "/reactchat/{username?}"

@using Microsoft.AspNetCore.SignalR.Client
@using Application.Chatting

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>
<div>동접자 수: @clientsCnt</div>
<div style="height: 350px; overflow-x: none">
    <div style="max-height: 300px; overflow-y: scroll; display: flex; flex-direction: column-reverse;">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                if (message.StartsWith(username)) {
                    <li>@message <button @onclick="()=>OnDeleteButtonClickAsync(message)">삭제</button></li>
                    
                }
                else {
                    <li>@message</li>
                }
            }
        </ul>
    </div>

    <div class="fixed-bottom bg-light p-2">
        <div class="container">
            <form class="row">
                <div class="col-auto">
                    <label for="messageInput">@username:</label>
                </div>
                
                    <div class="col">
                        <input id="messageInput" class="form-control" @bind="messageInput" size="50" />
                    </div>

                    <div class="col-auto">
                        <button @onclick:preventDefault class="btn btn-primary" @onclick="Send"
                            disabled="@(!IsConnected)">Send</button>
                    </div>
                
            </form>
        </div>
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;
    private int clientsCnt;

    [Parameter]
    public string? username { get; set; }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    // 메시지 삭제 버튼 입력 시 처리 함수
    public async Task OnDeleteButtonClickAsync(string message) {
        System.Console.WriteLine(message);
        if (hubConnection is not null)
            await hubConnection.SendAsync("DeleteMessage", message);
    }

    // 채팅창에 키보드 입력 시 처리 함수
    public async Task HandleKeyDown(KeyboardEventArgs e) {
        Console.WriteLine(messageInput);
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(messageInput))
        {
            await Send();
        }
    }

    // 익명 이름 만드는 함수
    @* static string GenerateRandomUsername(int length) {
        Random random = new Random();
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        return "익명-" + new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    } *@

    // 메시지를 채팅서버에 전송 함수
    private async Task Send() {
        // 채팅서버와 연결되어 있고 입력된 메시지가 비어있지 않으면 전송
        if (hubConnection is not null && !string.IsNullOrWhiteSpace(messageInput)) {
            await hubConnection.SendAsync("SendMessage", username, messageInput); // 전송
            ChattingStatic.GetInNewMessage($"{username}: {messageInput}"); // 메시지를 queue에 저장
            messageInput = null; // 메시지 input value 비우기
        }
    }

    // 페이지 초기화 시 호출
    // 메시지들 로딩, SignalR 설정
    protected override async Task OnInitializedAsync() {
        messages = ChattingStatic.messages.ToList();
        @* if (string.IsNullOrWhiteSpace(username))
            username = GenerateRandomUsername(6); *@
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("UpdateConnectedClientsCount", (count) => {
            clientsCnt = count;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("DeleteMessage", (message) => {
            messages.RemoveAt(messages.FindIndex((mes) => string.Compare(mes, message) == 0));
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    // 페이지 종료 시 호출 함수. 채팅서버 연결 끊음.
    public async ValueTask DisposeAsync() {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}
