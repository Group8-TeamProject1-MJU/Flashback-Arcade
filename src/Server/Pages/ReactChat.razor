@page "/reactchat/{username?}"

@using Microsoft.AspNetCore.SignalR.Client
@using Application.Chat
@using System.Text.Json

@inject NavigationManager _navigation
@inject SpamFilter _spamFilter

@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>
<div style="height: 350px; overflow-x: none" class="">
    <div>접속자 수: @_clientsCnt</div>
    <div style="max-height: 300px; overflow-y: scroll; display: flex; flex-direction: column-reverse;" class="row">
        <ul id="messagesList">
            @foreach (var mes in _messages) {
                <div class="d-flex justify-content-between">
                    <li>@($"{mes.userName}: {mes.message}") </li>
                        <span>
                            @if (mes.userName.StartsWith(userName)) {
                                <button class="" @onclick="()=>OnDeleteButtonClickAsync(mes)">삭제</button>
                            }

                            <span>@TimeZoneInfo.ConvertTimeFromUtc(mes.sentTime, _localTimeZone).ToString("(yyyy'년' MM'월' dd'일' - HH'시' mm'분' ss'초')")</span>
                        </span>
                </div>
            }
        </ul>
    </div>

    <div class="fixed-bottom bg-light p-2">
        <div class="container">
            <form class="row">
                <div class="col-auto">
                    <label for="messageInput">@userName:</label>
                </div>
                <div class="col">
                    <input id="messageInput" class="form-control" @bind="_messageInput" size="50" />
                </div>

                <div class="col-auto">
                    <button @onclick:preventDefault class="btn btn-primary" @onclick="Send"
                        disabled="@(!_isConnected)">Send</button>
                </div>
            </form>
        </div>
    </div>
</div>


@code {
    private HubConnection? _hubConnection;
    private List<ChatMessage> _messages = new();
    private string? _messageInput;
    private int _clientsCnt;
    private TimeZoneInfo _localTimeZone = TimeZoneInfo.Local;

    [Parameter]
    public string? userName { get; set; }

    private bool _isConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    // 메시지 삭제 버튼 입력 시 처리 함수
    public async Task OnDeleteButtonClickAsync(ChatMessage message) {
        if (_hubConnection is not null)
            await _hubConnection.SendAsync("DeleteMessage", JsonSerializer.Serialize(message));
    }

    // 채팅창에 키보드 입력 시 처리 함수
    public async Task HandleKeyDown(KeyboardEventArgs e) {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_messageInput))
            await Send();
    }

    // 메시지를 채팅서버에 전송 함수
    private async Task Send() {
        // 채팅서버와 연결되어 있고 입력된 메시지가 비어있지 않으면 전송
        if (_hubConnection is not null && !string.IsNullOrWhiteSpace(_messageInput)) {
            await _hubConnection.SendAsync("SendMessage", userName, _messageInput); // 전송
            _messageInput = null; // 메시지 input value 비우기
        }
    }

    // 페이지 초기화 시 호출
    // 메시지들 로딩, SignalR 설정
    protected override async Task OnInitializedAsync() {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigation.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<string>("ReceiveMessage", (json) => {
            var chatMessage = JsonSerializer.Deserialize<ChatMessage>(json);
            _messages.Add(chatMessage);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("DeleteMessage", (json) => {
            var mesToDelete = JsonSerializer.Deserialize<ChatMessage>(json);
            _messages.RemoveAt(_messages.FindIndex((mes) => mes.isEqual(mesToDelete)));
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("ReceivePrevMessages", (json) => {
            var prevMessages = JsonSerializer.Deserialize<List<ChatMessage>>(json);
            _messages = prevMessages;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<int>("UpdateConnectedClientsCount", (count) => {
            _clientsCnt = count;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("AddConnectedUserName", userName);
    }

    // 페이지 종료 시 호출 함수. 채팅서버 연결 끊음.
    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}
