@page "/reactchat/{username?}"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<PageTitle>Index</PageTitle>
<div style="height: 350px; overflow-x: none">
    <div style="max-height: 300px; overflow-y: scroll; display: flex; flex-direction: column-reverse;">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>
    </div>

    <div class="fixed-bottom bg-light p-2">
        <div class="container">
            <form class="row">
                <div class="col-auto">
                    <label for="messageInput">@username:</label>
                </div>
                
                    <div class="col">
                        <input id="messageInput" class="form-control" @bind="messageInput" size="50" />
                    </div>

                    <div class="col-auto">
                        <button @onclick:preventDefault class="btn btn-primary" @onclick="Send"
                            disabled="@(!IsConnected)">Send</button>
                    </div>
                
            </form>
        </div>
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;

    [Parameter]
    public string? username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null){
            await hubConnection.SendAsync("SendMessage", username, messageInput);
            messageInput=null;
            }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    static string GenerateRandomUsername(int length)
    {
        Random random = new Random();
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        return "익명-" + new string(Enumerable.Repeat(chars, length)
        .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (string.IsNullOrWhiteSpace(username))
        {
            username = GenerateRandomUsername(6);
        }
    }

    public async Task HandleKeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine("HandleKeyDown 메서드 호출됨.");
        Console.WriteLine(messageInput);
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(messageInput))
        {

            await Send();
        }
    }






}
