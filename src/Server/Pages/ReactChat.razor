@page "/reactchat/{username?}"

@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>
<div style="height: 350px; overflow-x: none" class="container">
    <div class="row">
        <div class="col-8">
            <div style="max-height: 300px; overflow-y: scroll; display: flex; flex-direction: column-reverse;" class="row">
                <ul id="messagesList">
                    @foreach (var message in _messages)
                    {
                        if (message.StartsWith(userName)) {
                            <li>@message <button @onclick="()=>OnDeleteButtonClickAsync(message)">삭제</button></li>
                            
                        }
                        else {
                            <li>@message</li>
                        }
                    }
                </ul>
            </div>

            <div class="fixed-bottom bg-light p-2">
                <div class="container">
                    <form class="row">
                        <div class="col-auto">
                            <label for="messageInput">@userName:</label>
                        </div>
                        
                            <div class="col">
                                <input id="messageInput" class="form-control" @bind="_messageInput" size="50" />
                            </div>

                            <div class="col-auto">
                                <button @onclick:preventDefault class="btn btn-primary" @onclick="Send"
                                    disabled="@(!_isConnected)">Send</button>
                            </div>
                        
                    </form>
                </div>
            </div>

        </div>
        <div class="col-4">
            <h5>채팅 접속자 리스트</h5>
            <div>접속자 수: @_clientsCnt</div>
            @foreach (var userName in _connectedUserNames) {
                <li>@userName</li>
            }

        </div>
    </div>
</div>


@code {
    private HubConnection? _hubConnection;
    private List<string> _messages = new List<string>();
    private string? _messageInput;
    private int _clientsCnt;

    [Parameter]
    public string? userName { get; set; }
    private List<string> _connectedUserNames = new();

    private bool _isConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    // 메시지 삭제 버튼 입력 시 처리 함수
    public async Task OnDeleteButtonClickAsync(string message) {
        if (_hubConnection is not null)
            await _hubConnection.SendAsync("DeleteMessage", message);
    }

    // 채팅창에 키보드 입력 시 처리 함수
    public async Task HandleKeyDown(KeyboardEventArgs e) {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_messageInput))
            await Send();
        
    }

    // 메시지를 채팅서버에 전송 함수
    private async Task Send() {
        // 채팅서버와 연결되어 있고 입력된 메시지가 비어있지 않으면 전송
        if (_hubConnection is not null && !string.IsNullOrWhiteSpace(_messageInput)) {
            await _hubConnection.SendAsync("SendMessage", userName, _messageInput); // 전송
            _messageInput = null; // 메시지 input value 비우기
        }
    }

    // 페이지 초기화 시 호출
    // 메시지들 로딩, SignalR 설정
    protected override async Task OnInitializedAsync() {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("DeleteMessage", (message) => {
            _messages.RemoveAt(_messages.FindIndex((mes) => string.Compare(mes, message) == 0));
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<List<string>>("ReceivePrevMessages", (ReceivedPrevMessages) => {
            _messages = ReceivedPrevMessages;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<int>("UpdateConnectedClientsCount", (count) => {
            _clientsCnt = count;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("ReceiveNewConnectedUserName", (receivedUserName) => {
            _connectedUserNames.Add(receivedUserName);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("RemoveConnectedUserName", (receivedUserName) => {
            _connectedUserNames.Remove(receivedUserName);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<List<string>>("ReceiveConnectedUserNames", (userNames) => {
            _connectedUserNames = userNames;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("AddConnectedUserName", userName);
    }

    // 페이지 종료 시 호출 함수. 채팅서버 연결 끊음.
    public async ValueTask DisposeAsync() {
        await _hubConnection.SendAsync("RemoveConnectedUserName", userName);

        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}
